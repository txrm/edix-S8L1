# coding: utf-8

"""
    AEMET OpenData

    AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ValoresClimatologicosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def climatologas_diarias_(self, fecha_ini_str, fecha_fin_str, idema, **kwargs):  # noqa: E501
        """Climatologías diarias.  # noqa: E501

        Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.climatologas_diarias_(fecha_ini_str, fecha_fin_str, idema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha_ini_str: Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC) (required)
        :param str fecha_fin_str: Fecha Final (AAAA-MM-DDTHH:MM:SSUTC) (required)
        :param str idema: Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.climatologas_diarias__with_http_info(fecha_ini_str, fecha_fin_str, idema, **kwargs)  # noqa: E501
        else:
            (data) = self.climatologas_diarias__with_http_info(fecha_ini_str, fecha_fin_str, idema, **kwargs)  # noqa: E501
            return data

    def climatologas_diarias__with_http_info(self, fecha_ini_str, fecha_fin_str, idema, **kwargs):  # noqa: E501
        """Climatologías diarias.  # noqa: E501

        Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.climatologas_diarias__with_http_info(fecha_ini_str, fecha_fin_str, idema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha_ini_str: Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC) (required)
        :param str fecha_fin_str: Fecha Final (AAAA-MM-DDTHH:MM:SSUTC) (required)
        :param str idema: Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fecha_ini_str', 'fecha_fin_str', 'idema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method climatologas_diarias_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha_ini_str' is set
        if ('fecha_ini_str' not in params or
                params['fecha_ini_str'] is None):
            raise ValueError("Missing the required parameter `fecha_ini_str` when calling `climatologas_diarias_`")  # noqa: E501
        # verify the required parameter 'fecha_fin_str' is set
        if ('fecha_fin_str' not in params or
                params['fecha_fin_str'] is None):
            raise ValueError("Missing the required parameter `fecha_fin_str` when calling `climatologas_diarias_`")  # noqa: E501
        # verify the required parameter 'idema' is set
        if ('idema' not in params or
                params['idema'] is None):
            raise ValueError("Missing the required parameter `idema` when calling `climatologas_diarias_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fecha_ini_str' in params:
            path_params['fechaIniStr'] = params['fecha_ini_str']  # noqa: E501
        if 'fecha_fin_str' in params:
            path_params['fechaFinStr'] = params['fecha_fin_str']  # noqa: E501
        if 'idema' in params:
            path_params['idema'] = params['idema']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/valores/climatologicos/diarios/datos/fechaini/{fechaIniStr}/fechafin/{fechaFinStr}/estacion/{idema}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def climatologas_diarias_1(self, fecha_ini_str, fecha_fin_str, **kwargs):  # noqa: E501
        """Climatologías diarias.  # noqa: E501

        Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.climatologas_diarias_1(fecha_ini_str, fecha_fin_str, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha_ini_str: Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC) (required)
        :param str fecha_fin_str: Fecha Final (AAAA-MM-DDTHH:MM:SSUTC) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.climatologas_diarias_1_with_http_info(fecha_ini_str, fecha_fin_str, **kwargs)  # noqa: E501
        else:
            (data) = self.climatologas_diarias_1_with_http_info(fecha_ini_str, fecha_fin_str, **kwargs)  # noqa: E501
            return data

    def climatologas_diarias_1_with_http_info(self, fecha_ini_str, fecha_fin_str, **kwargs):  # noqa: E501
        """Climatologías diarias.  # noqa: E501

        Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.climatologas_diarias_1_with_http_info(fecha_ini_str, fecha_fin_str, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha_ini_str: Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC) (required)
        :param str fecha_fin_str: Fecha Final (AAAA-MM-DDTHH:MM:SSUTC) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fecha_ini_str', 'fecha_fin_str']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method climatologas_diarias_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha_ini_str' is set
        if ('fecha_ini_str' not in params or
                params['fecha_ini_str'] is None):
            raise ValueError("Missing the required parameter `fecha_ini_str` when calling `climatologas_diarias_1`")  # noqa: E501
        # verify the required parameter 'fecha_fin_str' is set
        if ('fecha_fin_str' not in params or
                params['fecha_fin_str'] is None):
            raise ValueError("Missing the required parameter `fecha_fin_str` when calling `climatologas_diarias_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fecha_ini_str' in params:
            path_params['fechaIniStr'] = params['fecha_ini_str']  # noqa: E501
        if 'fecha_fin_str' in params:
            path_params['fechaFinStr'] = params['fecha_fin_str']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/valores/climatologicos/diarios/datos/fechaini/{fechaIniStr}/fechafin/{fechaFinStr}/todasestaciones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def climatologas_mensuales_anuales_(self, anio_ini_str, anio_fin_str, idema, **kwargs):  # noqa: E501
        """Climatologías mensuales anuales.  # noqa: E501

        Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.climatologas_mensuales_anuales_(anio_ini_str, anio_fin_str, idema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str anio_ini_str: Año Inicial (AAAA) (required)
        :param str anio_fin_str: Año Final (AAAA) (required)
        :param str idema: Indicativo climatológico de la EMA (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.climatologas_mensuales_anuales__with_http_info(anio_ini_str, anio_fin_str, idema, **kwargs)  # noqa: E501
        else:
            (data) = self.climatologas_mensuales_anuales__with_http_info(anio_ini_str, anio_fin_str, idema, **kwargs)  # noqa: E501
            return data

    def climatologas_mensuales_anuales__with_http_info(self, anio_ini_str, anio_fin_str, idema, **kwargs):  # noqa: E501
        """Climatologías mensuales anuales.  # noqa: E501

        Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.climatologas_mensuales_anuales__with_http_info(anio_ini_str, anio_fin_str, idema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str anio_ini_str: Año Inicial (AAAA) (required)
        :param str anio_fin_str: Año Final (AAAA) (required)
        :param str idema: Indicativo climatológico de la EMA (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['anio_ini_str', 'anio_fin_str', 'idema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method climatologas_mensuales_anuales_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'anio_ini_str' is set
        if ('anio_ini_str' not in params or
                params['anio_ini_str'] is None):
            raise ValueError("Missing the required parameter `anio_ini_str` when calling `climatologas_mensuales_anuales_`")  # noqa: E501
        # verify the required parameter 'anio_fin_str' is set
        if ('anio_fin_str' not in params or
                params['anio_fin_str'] is None):
            raise ValueError("Missing the required parameter `anio_fin_str` when calling `climatologas_mensuales_anuales_`")  # noqa: E501
        # verify the required parameter 'idema' is set
        if ('idema' not in params or
                params['idema'] is None):
            raise ValueError("Missing the required parameter `idema` when calling `climatologas_mensuales_anuales_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'anio_ini_str' in params:
            path_params['anioIniStr'] = params['anio_ini_str']  # noqa: E501
        if 'anio_fin_str' in params:
            path_params['anioFinStr'] = params['anio_fin_str']  # noqa: E501
        if 'idema' in params:
            path_params['idema'] = params['idema']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/valores/climatologicos/mensualesanuales/datos/anioini/{anioIniStr}/aniofin/{anioFinStr}/estacion/{idema}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def climatologas_normales__19812010_(self, idema, **kwargs):  # noqa: E501
        """Climatologías normales (1981-2010).  # noqa: E501

        Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.climatologas_normales__19812010_(idema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idema: Indicativo climatológico de la EMA (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.climatologas_normales__19812010__with_http_info(idema, **kwargs)  # noqa: E501
        else:
            (data) = self.climatologas_normales__19812010__with_http_info(idema, **kwargs)  # noqa: E501
            return data

    def climatologas_normales__19812010__with_http_info(self, idema, **kwargs):  # noqa: E501
        """Climatologías normales (1981-2010).  # noqa: E501

        Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.climatologas_normales__19812010__with_http_info(idema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idema: Indicativo climatológico de la EMA (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method climatologas_normales__19812010_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idema' is set
        if ('idema' not in params or
                params['idema'] is None):
            raise ValueError("Missing the required parameter `idema` when calling `climatologas_normales__19812010_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idema' in params:
            path_params['idema'] = params['idema']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/valores/climatologicos/normales/estacion/{idema}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def estaciones_por_indicativo_(self, estaciones, **kwargs):  # noqa: E501
        """Estaciones por indicativo.  # noqa: E501

        Características de la estación climatológica pasada por parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.estaciones_por_indicativo_(estaciones, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str estaciones: Listado de indicativos climatológicos (id1,id2,id3,...,idn) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.estaciones_por_indicativo__with_http_info(estaciones, **kwargs)  # noqa: E501
        else:
            (data) = self.estaciones_por_indicativo__with_http_info(estaciones, **kwargs)  # noqa: E501
            return data

    def estaciones_por_indicativo__with_http_info(self, estaciones, **kwargs):  # noqa: E501
        """Estaciones por indicativo.  # noqa: E501

        Características de la estación climatológica pasada por parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.estaciones_por_indicativo__with_http_info(estaciones, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str estaciones: Listado de indicativos climatológicos (id1,id2,id3,...,idn) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['estaciones']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method estaciones_por_indicativo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'estaciones' is set
        if ('estaciones' not in params or
                params['estaciones'] is None):
            raise ValueError("Missing the required parameter `estaciones` when calling `estaciones_por_indicativo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'estaciones' in params:
            path_params['estaciones'] = params['estaciones']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/valores/climatologicos/inventarioestaciones/estaciones/{estaciones}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventario_de_estaciones__valores_climatolgicos_(self, **kwargs):  # noqa: E501
        """Inventario de estaciones (valores climatológicos).  # noqa: E501

        Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inventario_de_estaciones__valores_climatolgicos_(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.inventario_de_estaciones__valores_climatolgicos__with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventario_de_estaciones__valores_climatolgicos__with_http_info(**kwargs)  # noqa: E501
            return data

    def inventario_de_estaciones__valores_climatolgicos__with_http_info(self, **kwargs):  # noqa: E501
        """Inventario de estaciones (valores climatológicos).  # noqa: E501

        Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inventario_de_estaciones__valores_climatolgicos__with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventario_de_estaciones__valores_climatolgicos_" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/valores/climatologicos/inventarioestaciones/todasestaciones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def valores_extremos_(self, parametro, idema, **kwargs):  # noqa: E501
        """Valores extremos.  # noqa: E501

        Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.valores_extremos_(parametro, idema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parametro:  | Código | Parámetro Meteorológico | |----------|----------| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento  (required)
        :param str idema: Indicativo climatológico de la EMA (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.valores_extremos__with_http_info(parametro, idema, **kwargs)  # noqa: E501
        else:
            (data) = self.valores_extremos__with_http_info(parametro, idema, **kwargs)  # noqa: E501
            return data

    def valores_extremos__with_http_info(self, parametro, idema, **kwargs):  # noqa: E501
        """Valores extremos.  # noqa: E501

        Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.valores_extremos__with_http_info(parametro, idema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parametro:  | Código | Parámetro Meteorológico | |----------|----------| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento  (required)
        :param str idema: Indicativo climatológico de la EMA (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parametro', 'idema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method valores_extremos_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parametro' is set
        if ('parametro' not in params or
                params['parametro'] is None):
            raise ValueError("Missing the required parameter `parametro` when calling `valores_extremos_`")  # noqa: E501
        # verify the required parameter 'idema' is set
        if ('idema' not in params or
                params['idema'] is None):
            raise ValueError("Missing the required parameter `idema` when calling `valores_extremos_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parametro' in params:
            path_params['parametro'] = params['parametro']  # noqa: E501
        if 'idema' in params:
            path_params['idema'] = params['idema']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/valores/climatologicos/valoresextremos/parametro/{parametro}/estacion/{idema}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
