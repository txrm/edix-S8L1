# coding: utf-8

"""
    AEMET OpenData

    AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PrediccionesEspecificasApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def informacion_nivologica_(self, area, **kwargs):  # noqa: E501
        """Información nivológica.  # noqa: E501

        Información nivológica para la zona montañosa que se pasa como parámetro (area).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.informacion_nivologica_(area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area:  | Código de  Área Montañosa |  Área Montañosa | |----------|----------| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.informacion_nivologica__with_http_info(area, **kwargs)  # noqa: E501
        else:
            (data) = self.informacion_nivologica__with_http_info(area, **kwargs)  # noqa: E501
            return data

    def informacion_nivologica__with_http_info(self, area, **kwargs):  # noqa: E501
        """Información nivológica.  # noqa: E501

        Información nivológica para la zona montañosa que se pasa como parámetro (area).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.informacion_nivologica__with_http_info(area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area:  | Código de  Área Montañosa |  Área Montañosa | |----------|----------| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method informacion_nivologica_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `informacion_nivologica_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/especifica/nivologica/{area}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_de_montaa__tiempo_actual_(self, area, dia, **kwargs):  # noqa: E501
        """Predicción de montaña. Tiempo actual.  # noqa: E501

        Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_de_montaa__tiempo_actual_(area, dia, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area:  | Código de Área Montañosa | Área Montañosa | |----------|----------| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada (required)
        :param str dia:  | Código de día | Día | |----------|----------| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_de_montaa__tiempo_actual__with_http_info(area, dia, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_de_montaa__tiempo_actual__with_http_info(area, dia, **kwargs)  # noqa: E501
            return data

    def prediccin_de_montaa__tiempo_actual__with_http_info(self, area, dia, **kwargs):  # noqa: E501
        """Predicción de montaña. Tiempo actual.  # noqa: E501

        Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_de_montaa__tiempo_actual__with_http_info(area, dia, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area:  | Código de Área Montañosa | Área Montañosa | |----------|----------| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada (required)
        :param str dia:  | Código de día | Día | |----------|----------| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area', 'dia']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_de_montaa__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `prediccin_de_montaa__tiempo_actual_`")  # noqa: E501
        # verify the required parameter 'dia' is set
        if ('dia' not in params or
                params['dia'] is None):
            raise ValueError("Missing the required parameter `dia` when calling `prediccin_de_montaa__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501
        if 'dia' in params:
            path_params['dia'] = params['dia']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/especifica/montaña/pasada/area/{area}/dia/{dia}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_de_montaa__tiempo_pasado_(self, area, **kwargs):  # noqa: E501
        """Predicción de montaña. Tiempo pasado.  # noqa: E501

        Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_de_montaa__tiempo_pasado_(area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area:  | Código de Área Montañosa | Área Montañosa | |----------|----------| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_de_montaa__tiempo_pasado__with_http_info(area, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_de_montaa__tiempo_pasado__with_http_info(area, **kwargs)  # noqa: E501
            return data

    def prediccin_de_montaa__tiempo_pasado__with_http_info(self, area, **kwargs):  # noqa: E501
        """Predicción de montaña. Tiempo pasado.  # noqa: E501

        Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_de_montaa__tiempo_pasado__with_http_info(area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area:  | Código de Área Montañosa | Área Montañosa | |----------|----------| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_de_montaa__tiempo_pasado_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `prediccin_de_montaa__tiempo_pasado_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/especifica/montaña/pasada/area/{area}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_de_radiacin_ultravioleta__uvi_(self, dia, **kwargs):  # noqa: E501
        """Predicción de radiación ultravioleta (UVI).  # noqa: E501

         Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_de_radiacin_ultravioleta__uvi_(dia, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dia:  | Código de día | Día | |----------|----------| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_de_radiacin_ultravioleta__uvi__with_http_info(dia, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_de_radiacin_ultravioleta__uvi__with_http_info(dia, **kwargs)  # noqa: E501
            return data

    def prediccin_de_radiacin_ultravioleta__uvi__with_http_info(self, dia, **kwargs):  # noqa: E501
        """Predicción de radiación ultravioleta (UVI).  # noqa: E501

         Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_de_radiacin_ultravioleta__uvi__with_http_info(dia, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dia:  | Código de día | Día | |----------|----------| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dia']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_de_radiacin_ultravioleta__uvi_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dia' is set
        if ('dia' not in params or
                params['dia'] is None):
            raise ValueError("Missing the required parameter `dia` when calling `prediccin_de_radiacin_ultravioleta__uvi_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dia' in params:
            path_params['dia'] = params['dia']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/especifica/uvi/{dia}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_para_las_playas__tiempo_actual_(self, playa, **kwargs):  # noqa: E501
        """Predicción para las playas. Tiempo actual.  # noqa: E501

        La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_para_las_playas__tiempo_actual_(playa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playa: Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_para_las_playas__tiempo_actual__with_http_info(playa, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_para_las_playas__tiempo_actual__with_http_info(playa, **kwargs)  # noqa: E501
            return data

    def prediccin_para_las_playas__tiempo_actual__with_http_info(self, playa, **kwargs):  # noqa: E501
        """Predicción para las playas. Tiempo actual.  # noqa: E501

        La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_para_las_playas__tiempo_actual__with_http_info(playa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playa: Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playa']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_para_las_playas__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playa' is set
        if ('playa' not in params or
                params['playa'] is None):
            raise ValueError("Missing the required parameter `playa` when calling `prediccin_para_las_playas__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'playa' in params:
            path_params['playa'] = params['playa']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/especifica/playa/{playa}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_por_municipios_diaria__tiempo_actual_(self, municipio, **kwargs):  # noqa: E501
        """Predicción por municipios diaria. Tiempo actual.  # noqa: E501

        Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_por_municipios_diaria__tiempo_actual_(municipio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str municipio: Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_por_municipios_diaria__tiempo_actual__with_http_info(municipio, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_por_municipios_diaria__tiempo_actual__with_http_info(municipio, **kwargs)  # noqa: E501
            return data

    def prediccin_por_municipios_diaria__tiempo_actual__with_http_info(self, municipio, **kwargs):  # noqa: E501
        """Predicción por municipios diaria. Tiempo actual.  # noqa: E501

        Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_por_municipios_diaria__tiempo_actual__with_http_info(municipio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str municipio: Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['municipio']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_por_municipios_diaria__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'municipio' is set
        if ('municipio' not in params or
                params['municipio'] is None):
            raise ValueError("Missing the required parameter `municipio` when calling `prediccin_por_municipios_diaria__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'municipio' in params:
            path_params['municipio'] = params['municipio']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/especifica/municipio/diaria/{municipio}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_por_municipios_horaria__tiempo_actual_(self, municipio, **kwargs):  # noqa: E501
        """Predicción por municipios horaria. Tiempo actual.  # noqa: E501

        Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_por_municipios_horaria__tiempo_actual_(municipio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str municipio: Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_por_municipios_horaria__tiempo_actual__with_http_info(municipio, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_por_municipios_horaria__tiempo_actual__with_http_info(municipio, **kwargs)  # noqa: E501
            return data

    def prediccin_por_municipios_horaria__tiempo_actual__with_http_info(self, municipio, **kwargs):  # noqa: E501
        """Predicción por municipios horaria. Tiempo actual.  # noqa: E501

        Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_por_municipios_horaria__tiempo_actual__with_http_info(municipio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str municipio: Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['municipio']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_por_municipios_horaria__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'municipio' is set
        if ('municipio' not in params or
                params['municipio'] is None):
            raise ValueError("Missing the required parameter `municipio` when calling `prediccin_por_municipios_horaria__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'municipio' in params:
            path_params['municipio'] = params['municipio']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/especifica/municipio/horaria/{municipio}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
