# coding: utf-8

"""
    AEMET OpenData

    AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RedesEspecialesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def contenido_total_de_ozono__tiempo_actual_(self, **kwargs):  # noqa: E501
        """Contenido total de ozono. Tiempo actual.  # noqa: E501

        Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contenido_total_de_ozono__tiempo_actual_(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contenido_total_de_ozono__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.contenido_total_de_ozono__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
            return data

    def contenido_total_de_ozono__tiempo_actual__with_http_info(self, **kwargs):  # noqa: E501
        """Contenido total de ozono. Tiempo actual.  # noqa: E501

        Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contenido_total_de_ozono__tiempo_actual__with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contenido_total_de_ozono__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/red/especial/ozono', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datos_de_contaminacin_de_fondo__tiempo_actual_(self, nombre_estacion, **kwargs):  # noqa: E501
        """Datos de contaminación de fondo. Tiempo actual.  # noqa: E501

        Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datos_de_contaminacin_de_fondo__tiempo_actual_(nombre_estacion, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nombre_estacion:  | Código | Estación de la Red EMEP | |----------|----------| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia)  (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datos_de_contaminacin_de_fondo__tiempo_actual__with_http_info(nombre_estacion, **kwargs)  # noqa: E501
        else:
            (data) = self.datos_de_contaminacin_de_fondo__tiempo_actual__with_http_info(nombre_estacion, **kwargs)  # noqa: E501
            return data

    def datos_de_contaminacin_de_fondo__tiempo_actual__with_http_info(self, nombre_estacion, **kwargs):  # noqa: E501
        """Datos de contaminación de fondo. Tiempo actual.  # noqa: E501

        Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datos_de_contaminacin_de_fondo__tiempo_actual__with_http_info(nombre_estacion, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nombre_estacion:  | Código | Estación de la Red EMEP | |----------|----------| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia)  (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nombre_estacion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datos_de_contaminacin_de_fondo__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nombre_estacion' is set
        if ('nombre_estacion' not in params or
                params['nombre_estacion'] is None):
            raise ValueError("Missing the required parameter `nombre_estacion` when calling `datos_de_contaminacin_de_fondo__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nombre_estacion' in params:
            path_params['nombre_estacion'] = params['nombre_estacion']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/red/especial/contaminacionfondo/estacion/{nombre_estacion}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datos_de_radiacin_global_directa_o_difusa__tiempo_actual_(self, **kwargs):  # noqa: E501
        """Datos de radiación global, directa o difusa. Tiempo actual.  # noqa: E501

        Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datos_de_radiacin_global_directa_o_difusa__tiempo_actual_(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datos_de_radiacin_global_directa_o_difusa__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.datos_de_radiacin_global_directa_o_difusa__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
            return data

    def datos_de_radiacin_global_directa_o_difusa__tiempo_actual__with_http_info(self, **kwargs):  # noqa: E501
        """Datos de radiación global, directa o difusa. Tiempo actual.  # noqa: E501

        Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datos_de_radiacin_global_directa_o_difusa__tiempo_actual__with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datos_de_radiacin_global_directa_o_difusa__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/red/especial/radiacion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perfiles_verticales_de_ozono__tiempo_actual_(self, estacion, **kwargs):  # noqa: E501
        """Perfiles verticales de ozono. Tiempo actual.  # noqa: E501

        Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perfiles_verticales_de_ozono__tiempo_actual_(estacion, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str estacion:  | Código | Estación | |----------|----------| | canarias  | Izaña   | | peninsula  | Madrid    (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.perfiles_verticales_de_ozono__tiempo_actual__with_http_info(estacion, **kwargs)  # noqa: E501
        else:
            (data) = self.perfiles_verticales_de_ozono__tiempo_actual__with_http_info(estacion, **kwargs)  # noqa: E501
            return data

    def perfiles_verticales_de_ozono__tiempo_actual__with_http_info(self, estacion, **kwargs):  # noqa: E501
        """Perfiles verticales de ozono. Tiempo actual.  # noqa: E501

        Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perfiles_verticales_de_ozono__tiempo_actual__with_http_info(estacion, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str estacion:  | Código | Estación | |----------|----------| | canarias  | Izaña   | | peninsula  | Madrid    (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['estacion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perfiles_verticales_de_ozono__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'estacion' is set
        if ('estacion' not in params or
                params['estacion'] is None):
            raise ValueError("Missing the required parameter `estacion` when calling `perfiles_verticales_de_ozono__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'estacion' in params:
            path_params['estacion'] = params['estacion']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/red/especial/perfilozono/estacion/{estacion}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
