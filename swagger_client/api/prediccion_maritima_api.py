# coding: utf-8

"""
    AEMET OpenData

    AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PrediccionMaritimaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def prediccin_martima_costera_(self, costa, **kwargs):  # noqa: E501
        """Predicción marítima costera.  # noqa: E501

        Predicción para un periodo de 24 horas de las condiciones meteorológicas para la zona costera pasada por parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_martima_costera_(costa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str costa:  | Código | Área Costera | |----------|----------| | 42 | Costa de Andalucía Occidental y Ceuta   | | 47  | Costa de Andalucía Oriental y Melilla   | | 41  | Costa de Asturias, Cantabria y País Vasco  | | 45  | Costa de Cataluña   | | 40  | Costa de Galicia   | | 44  | Costa de Illes Balears   | | 43  | Costa de las Islas Canarias  | | 46  | Costa de Valencia y Murcia (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_martima_costera__with_http_info(costa, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_martima_costera__with_http_info(costa, **kwargs)  # noqa: E501
            return data

    def prediccin_martima_costera__with_http_info(self, costa, **kwargs):  # noqa: E501
        """Predicción marítima costera.  # noqa: E501

        Predicción para un periodo de 24 horas de las condiciones meteorológicas para la zona costera pasada por parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_martima_costera__with_http_info(costa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str costa:  | Código | Área Costera | |----------|----------| | 42 | Costa de Andalucía Occidental y Ceuta   | | 47  | Costa de Andalucía Oriental y Melilla   | | 41  | Costa de Asturias, Cantabria y País Vasco  | | 45  | Costa de Cataluña   | | 40  | Costa de Galicia   | | 44  | Costa de Illes Balears   | | 43  | Costa de las Islas Canarias  | | 46  | Costa de Valencia y Murcia (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['costa']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_martima_costera_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'costa' is set
        if ('costa' not in params or
                params['costa'] is None):
            raise ValueError("Missing the required parameter `costa` when calling `prediccin_martima_costera_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'costa' in params:
            path_params['costa'] = params['costa']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/maritima/costera/costa/{costa}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_martima_de_alta_mar_(self, area, **kwargs):  # noqa: E501
        """Predicción marítima de alta mar.  # noqa: E501

        Predicción para un periodo de 24 horas de las condiciones meteorológicas para el área marítima pasada por parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_martima_de_alta_mar_(area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area:  | Código | Área de Alta Mar | |----------|----------| | 0 | Océano Atlántico al sur de 35º N   | | 1  | Océano Atlántico al norte de 30º N   | | 2  | Mar Mediterráneo (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_martima_de_alta_mar__with_http_info(area, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_martima_de_alta_mar__with_http_info(area, **kwargs)  # noqa: E501
            return data

    def prediccin_martima_de_alta_mar__with_http_info(self, area, **kwargs):  # noqa: E501
        """Predicción marítima de alta mar.  # noqa: E501

        Predicción para un periodo de 24 horas de las condiciones meteorológicas para el área marítima pasada por parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_martima_de_alta_mar__with_http_info(area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area:  | Código | Área de Alta Mar | |----------|----------| | 0 | Océano Atlántico al sur de 35º N   | | 1  | Océano Atlántico al norte de 30º N   | | 2  | Mar Mediterráneo (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_martima_de_alta_mar_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `prediccin_martima_de_alta_mar_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/maritima/altamar/area/{area}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
