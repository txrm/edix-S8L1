# coding: utf-8

"""
    AEMET OpenData

    AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PrediccionesNormalizadasTextoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def prediccin_ccaa_hoy__archivo_(self, ccaa, fecha, **kwargs):  # noqa: E501
        """Predicción CCAA hoy. Archivo.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) con validez para el día de fecha de elaboración que se pasa como parámetro (fecha). Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_hoy__archivo_(ccaa, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_ccaa_hoy__archivo__with_http_info(ccaa, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_ccaa_hoy__archivo__with_http_info(ccaa, fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_ccaa_hoy__archivo__with_http_info(self, ccaa, fecha, **kwargs):  # noqa: E501
        """Predicción CCAA hoy. Archivo.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) con validez para el día de fecha de elaboración que se pasa como parámetro (fecha). Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_hoy__archivo__with_http_info(ccaa, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ccaa', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_ccaa_hoy__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ccaa' is set
        if ('ccaa' not in params or
                params['ccaa'] is None):
            raise ValueError("Missing the required parameter `ccaa` when calling `prediccin_ccaa_hoy__archivo_`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_ccaa_hoy__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ccaa' in params:
            path_params['ccaa'] = params['ccaa']  # noqa: E501
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/ccaa/hoy/{ccaa}/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_ccaa_hoy__tiempo_actual_(self, ccaa, **kwargs):  # noqa: E501
        """Predicción CCAA hoy. Tiempo actual.  # noqa: E501

        Predicción para la CCAA que se pasa como parámetro con validez para mismo día que la fecha de petición. En el caso de que en la fecha de petición este producto todavía no se hubiera elaborado, se retornará el último elaborado. Actualización continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_hoy__tiempo_actual_(ccaa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Asturias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_ccaa_hoy__tiempo_actual__with_http_info(ccaa, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_ccaa_hoy__tiempo_actual__with_http_info(ccaa, **kwargs)  # noqa: E501
            return data

    def prediccin_ccaa_hoy__tiempo_actual__with_http_info(self, ccaa, **kwargs):  # noqa: E501
        """Predicción CCAA hoy. Tiempo actual.  # noqa: E501

        Predicción para la CCAA que se pasa como parámetro con validez para mismo día que la fecha de petición. En el caso de que en la fecha de petición este producto todavía no se hubiera elaborado, se retornará el último elaborado. Actualización continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_hoy__tiempo_actual__with_http_info(ccaa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Asturias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ccaa']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_ccaa_hoy__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ccaa' is set
        if ('ccaa' not in params or
                params['ccaa'] is None):
            raise ValueError("Missing the required parameter `ccaa` when calling `prediccin_ccaa_hoy__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ccaa' in params:
            path_params['ccaa'] = params['ccaa']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/ccaa/hoy/{ccaa}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_ccaa_maana__archivo_(self, ccaa, fecha, **kwargs):  # noqa: E501
        """Predicción CCAA mañana. Archivo.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) con validez para el día siguiente a la fecha de elaboración que se pasa como parámetro (fecha). Periodicidad de actualización. continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_maana__archivo_(ccaa, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_ccaa_maana__archivo__with_http_info(ccaa, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_ccaa_maana__archivo__with_http_info(ccaa, fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_ccaa_maana__archivo__with_http_info(self, ccaa, fecha, **kwargs):  # noqa: E501
        """Predicción CCAA mañana. Archivo.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) con validez para el día siguiente a la fecha de elaboración que se pasa como parámetro (fecha). Periodicidad de actualización. continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_maana__archivo__with_http_info(ccaa, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ccaa', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_ccaa_maana__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ccaa' is set
        if ('ccaa' not in params or
                params['ccaa'] is None):
            raise ValueError("Missing the required parameter `ccaa` when calling `prediccin_ccaa_maana__archivo_`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_ccaa_maana__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ccaa' in params:
            path_params['ccaa'] = params['ccaa']  # noqa: E501
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/ccaa/manana/{ccaa}/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_ccaa_maana__tiempo_actual_(self, ccaa, **kwargs):  # noqa: E501
        """Predicción CCAA mañana. Tiempo actual.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro para el día siguiente a la fecha de la petición. En el caso de el producto no se hubiera elaborado todavía en la fecha de petición se retornará el último producto elaborado. Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_maana__tiempo_actual_(ccaa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_ccaa_maana__tiempo_actual__with_http_info(ccaa, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_ccaa_maana__tiempo_actual__with_http_info(ccaa, **kwargs)  # noqa: E501
            return data

    def prediccin_ccaa_maana__tiempo_actual__with_http_info(self, ccaa, **kwargs):  # noqa: E501
        """Predicción CCAA mañana. Tiempo actual.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro para el día siguiente a la fecha de la petición. En el caso de el producto no se hubiera elaborado todavía en la fecha de petición se retornará el último producto elaborado. Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_maana__tiempo_actual__with_http_info(ccaa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ccaa']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_ccaa_maana__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ccaa' is set
        if ('ccaa' not in params or
                params['ccaa'] is None):
            raise ValueError("Missing the required parameter `ccaa` when calling `prediccin_ccaa_maana__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ccaa' in params:
            path_params['ccaa'] = params['ccaa']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/ccaa/manana/{ccaa}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_ccaa_medio_plazo__archivo_(self, ccaa, fecha, **kwargs):  # noqa: E501
        """Predicción CCAA medio plazo. Archivo.  # noqa: E501

        Predicción de mediio plazo para la comunidad autónoma que se pasa como parámetro (ccaa) a partir de la fecha de elaboración que se pasa como parámetro (fecha). Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_medio_plazo__archivo_(ccaa, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_ccaa_medio_plazo__archivo__with_http_info(ccaa, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_ccaa_medio_plazo__archivo__with_http_info(ccaa, fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_ccaa_medio_plazo__archivo__with_http_info(self, ccaa, fecha, **kwargs):  # noqa: E501
        """Predicción CCAA medio plazo. Archivo.  # noqa: E501

        Predicción de mediio plazo para la comunidad autónoma que se pasa como parámetro (ccaa) a partir de la fecha de elaboración que se pasa como parámetro (fecha). Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_medio_plazo__archivo__with_http_info(ccaa, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ccaa', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_ccaa_medio_plazo__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ccaa' is set
        if ('ccaa' not in params or
                params['ccaa'] is None):
            raise ValueError("Missing the required parameter `ccaa` when calling `prediccin_ccaa_medio_plazo__archivo_`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_ccaa_medio_plazo__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ccaa' in params:
            path_params['ccaa'] = params['ccaa']  # noqa: E501
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/ccaa/medioplazo/{ccaa}/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_ccaa_medio_plazo__tiempo_actual_(self, ccaa, **kwargs):  # noqa: E501
        """Predicción CCAA medio plazo. Tiempo actual.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y con validez para el medio plazo a partir de la fecha de petición. En el caso de que en el fecha de la petición no se hubiera generado aún el producto, se retornará el última elaborado. Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_medio_plazo__tiempo_actual_(ccaa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_ccaa_medio_plazo__tiempo_actual__with_http_info(ccaa, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_ccaa_medio_plazo__tiempo_actual__with_http_info(ccaa, **kwargs)  # noqa: E501
            return data

    def prediccin_ccaa_medio_plazo__tiempo_actual__with_http_info(self, ccaa, **kwargs):  # noqa: E501
        """Predicción CCAA medio plazo. Tiempo actual.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y con validez para el medio plazo a partir de la fecha de petición. En el caso de que en el fecha de la petición no se hubiera generado aún el producto, se retornará el última elaborado. Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_medio_plazo__tiempo_actual__with_http_info(ccaa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ccaa']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_ccaa_medio_plazo__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ccaa' is set
        if ('ccaa' not in params or
                params['ccaa'] is None):
            raise ValueError("Missing the required parameter `ccaa` when calling `prediccin_ccaa_medio_plazo__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ccaa' in params:
            path_params['ccaa'] = params['ccaa']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/ccaa/medioplazo/{ccaa}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_ccaa_pasado_maana__archivo_(self, ccaa, fecha, **kwargs):  # noqa: E501
        """Predicción CCAA pasado mañana. Archivo.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y validez para pasado mañana a partir de la fecha de elaboración que se pasa como parámetro (fecha). Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_pasado_maana__archivo_(ccaa, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_ccaa_pasado_maana__archivo__with_http_info(ccaa, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_ccaa_pasado_maana__archivo__with_http_info(ccaa, fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_ccaa_pasado_maana__archivo__with_http_info(self, ccaa, fecha, **kwargs):  # noqa: E501
        """Predicción CCAA pasado mañana. Archivo.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y validez para pasado mañana a partir de la fecha de elaboración que se pasa como parámetro (fecha). Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_pasado_maana__archivo__with_http_info(ccaa, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ccaa', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_ccaa_pasado_maana__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ccaa' is set
        if ('ccaa' not in params or
                params['ccaa'] is None):
            raise ValueError("Missing the required parameter `ccaa` when calling `prediccin_ccaa_pasado_maana__archivo_`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_ccaa_pasado_maana__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ccaa' in params:
            path_params['ccaa'] = params['ccaa']  # noqa: E501
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/ccaa/pasadomanana/{ccaa}/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_ccaa_pasado_maana__tiempo_actual_(self, ccaa, **kwargs):  # noqa: E501
        """Predicción CCAA pasado mañana. Tiempo actual.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y validez para el medio plazo a partir de la fecha de la petición. En el caso de que en la fecha de la petición dicho producto aún no se hubiera generado retornará el último de este tipo que se hubiera generado.  Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_pasado_maana__tiempo_actual_(ccaa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_ccaa_pasado_maana__tiempo_actual__with_http_info(ccaa, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_ccaa_pasado_maana__tiempo_actual__with_http_info(ccaa, **kwargs)  # noqa: E501
            return data

    def prediccin_ccaa_pasado_maana__tiempo_actual__with_http_info(self, ccaa, **kwargs):  # noqa: E501
        """Predicción CCAA pasado mañana. Tiempo actual.  # noqa: E501

        Predicción para la comunidad autónoma que se pasa como parámetro (ccaa) y validez para el medio plazo a partir de la fecha de la petición. En el caso de que en la fecha de la petición dicho producto aún no se hubiera generado retornará el último de este tipo que se hubiera generado.  Periodicidad de actualización: continuamente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_ccaa_pasado_maana__tiempo_actual__with_http_info(ccaa, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ccaa:  | Código de CCAA | CCAA | |----------|----------| | and  | Andalucía   | | arn  | Aragón   | | ast  | Astrrias  | | bal  | Ballears, Illes   | | coo  | Canarias   | | can  | Cantabria   | | cle  | Castilla y León   | | clm  | Castilla - La Mancha   | | cat  | Cataluña   | | val  | Comunitat Valenciana   | | ext  | Extremadura   | | gal  | Galicia   | | mad  | Madrid, Comunidad de    | | mur  | Murcia, Región de   | | nav  | Navarra, Comunidad Foral de   | | pva  | País Vasco | | rio  | Rioja, La    (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ccaa']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_ccaa_pasado_maana__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ccaa' is set
        if ('ccaa' not in params or
                params['ccaa'] is None):
            raise ValueError("Missing the required parameter `ccaa` when calling `prediccin_ccaa_pasado_maana__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ccaa' in params:
            path_params['ccaa'] = params['ccaa']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/ccaa/pasadomanana/{ccaa}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_hoy__archivo_(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional hoy. Archivo.  # noqa: E501

        Predicción nacional para el día correspondiente a la fecha que se pasa como parámetro en en formato texto. Actualización diaria. Hay días en los que este producto no se realiza. En ese caso se devuelve un 404 producto no existente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_hoy__archivo_(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Fecha en formato (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_hoy__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_hoy__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_nacional_hoy__archivo__with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional hoy. Archivo.  # noqa: E501

        Predicción nacional para el día correspondiente a la fecha que se pasa como parámetro en en formato texto. Actualización diaria. Hay días en los que este producto no se realiza. En ese caso se devuelve un 404 producto no existente.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_hoy__archivo__with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Fecha en formato (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_hoy__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_nacional_hoy__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/hoy/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_hoy__tiempo_actual_(self, **kwargs):  # noqa: E501
        """Predicción nacional hoy. Última elaborada.  # noqa: E501

        Predicción nacional para el día actual a la fecha de elaboración en formato texto. Actualización diaria. Hay días en los que este producto no se realiza. En ese caso se devuelve la predicción nacional última que se elaboró.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_hoy__tiempo_actual_(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_hoy__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_hoy__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
            return data

    def prediccin_nacional_hoy__tiempo_actual__with_http_info(self, **kwargs):  # noqa: E501
        """Predicción nacional hoy. Última elaborada.  # noqa: E501

        Predicción nacional para el día actual a la fecha de elaboración en formato texto. Actualización diaria. Hay días en los que este producto no se realiza. En ese caso se devuelve la predicción nacional última que se elaboró.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_hoy__tiempo_actual__with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_hoy__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/hoy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_maana__archivo_(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional mañana. Archivo.  # noqa: E501

        Predicción nacional para el día siguiente a la fecha de elaboración. En este caso la fecha de elaboración es la fecha que se pasa como parámetro. Actualización diaria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_maana__archivo_(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Día (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_maana__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_maana__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_nacional_maana__archivo__with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional mañana. Archivo.  # noqa: E501

        Predicción nacional para el día siguiente a la fecha de elaboración. En este caso la fecha de elaboración es la fecha que se pasa como parámetro. Actualización diaria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_maana__archivo__with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Día (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_maana__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_nacional_maana__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/manana/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_maana__tiempo_actual_(self, **kwargs):  # noqa: E501
        """Predicción nacional mañana. Tiempo actual.  # noqa: E501

        Predicción nacional para el día siguiente a la fecha de elaboración. En este caso la fecha de elaboración es el día actual. Actualización diaria. En el caso de que en el día actual  todavía no se haya elaborado se devolverá el último producto de predicción nacional para mañana elaborado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_maana__tiempo_actual_(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_maana__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_maana__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
            return data

    def prediccin_nacional_maana__tiempo_actual__with_http_info(self, **kwargs):  # noqa: E501
        """Predicción nacional mañana. Tiempo actual.  # noqa: E501

        Predicción nacional para el día siguiente a la fecha de elaboración. En este caso la fecha de elaboración es el día actual. Actualización diaria. En el caso de que en el día actual  todavía no se haya elaborado se devolverá el último producto de predicción nacional para mañana elaborado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_maana__tiempo_actual__with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_maana__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/manana', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_medio_plazo__archivo_(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional medio plazo. Archivo.  # noqa: E501

        Predicción nacional para el medio plazo siguiente a la fecha de elaboración. En este caso, la fecha de elaboración es la fecha que se pasa como parámetro. Actualización diaria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_medio_plazo__archivo_(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Día (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_medio_plazo__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_medio_plazo__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_nacional_medio_plazo__archivo__with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional medio plazo. Archivo.  # noqa: E501

        Predicción nacional para el medio plazo siguiente a la fecha de elaboración. En este caso, la fecha de elaboración es la fecha que se pasa como parámetro. Actualización diaria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_medio_plazo__archivo__with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Día (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_medio_plazo__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_nacional_medio_plazo__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/medioplazo/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_medio_plazo__tiempo_actual_(self, **kwargs):  # noqa: E501
        """Predicción nacional medio plazo. Tiempo actual.  # noqa: E501

        Predicción nacional para medio plazo siguiente a la fecha de elaboración. En este caso la fecha de elaboración es el día actual. Actualización diaria. En el caso de que en el día actual  todavía no se haya elaborado se devolverá el último producto de predicción nacional para medio plazo elaborado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_medio_plazo__tiempo_actual_(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_medio_plazo__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_medio_plazo__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
            return data

    def prediccin_nacional_medio_plazo__tiempo_actual__with_http_info(self, **kwargs):  # noqa: E501
        """Predicción nacional medio plazo. Tiempo actual.  # noqa: E501

        Predicción nacional para medio plazo siguiente a la fecha de elaboración. En este caso la fecha de elaboración es el día actual. Actualización diaria. En el caso de que en el día actual  todavía no se haya elaborado se devolverá el último producto de predicción nacional para medio plazo elaborado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_medio_plazo__tiempo_actual__with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_medio_plazo__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/medioplazo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_pasado_maana__archivo_(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional pasado mañana. Archivo.  # noqa: E501

        Predicción nacional para pasado mañana siguiente a la fecha de elaboración. En este caso, la fecha de elaboración es la fecha que se pasa como parámetro. Actualización diaria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_pasado_maana__archivo_(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Día (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_pasado_maana__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_pasado_maana__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_nacional_pasado_maana__archivo__with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional pasado mañana. Archivo.  # noqa: E501

        Predicción nacional para pasado mañana siguiente a la fecha de elaboración. En este caso, la fecha de elaboración es la fecha que se pasa como parámetro. Actualización diaria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_pasado_maana__archivo__with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Día (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_pasado_maana__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_nacional_pasado_maana__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/pasadomanana/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_pasado_maana__tiempo_actual_(self, **kwargs):  # noqa: E501
        """Predicción nacional pasado mañana. Tiempo actual.  # noqa: E501

        Predicción nacional para pasado mañana siguiente a la fecha de elaboración. En este caso la fecha de elaboración es el día actual. Actualización diaria. En el caso de que en el día actual  todavía no se haya elaborado se devolverá el último producto de predicción nacional para pasado mañana elaborado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_pasado_maana__tiempo_actual_(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_pasado_maana__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_pasado_maana__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
            return data

    def prediccin_nacional_pasado_maana__tiempo_actual__with_http_info(self, **kwargs):  # noqa: E501
        """Predicción nacional pasado mañana. Tiempo actual.  # noqa: E501

        Predicción nacional para pasado mañana siguiente a la fecha de elaboración. En este caso la fecha de elaboración es el día actual. Actualización diaria. En el caso de que en el día actual  todavía no se haya elaborado se devolverá el último producto de predicción nacional para pasado mañana elaborado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_pasado_maana__tiempo_actual__with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_pasado_maana__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/pasadomanana', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_tendencia__archivo_(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional tendencia. Archivo.  # noqa: E501

        Predicción nacional para tendencia siguiente a la fecha de elaboración. En este caso, la fecha de elaboración es la fecha que se pasa como parámetro. Actualización diaria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_tendencia__archivo_(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Día (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_tendencia__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_tendencia__archivo__with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_nacional_tendencia__archivo__with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Predicción nacional tendencia. Archivo.  # noqa: E501

        Predicción nacional para tendencia siguiente a la fecha de elaboración. En este caso, la fecha de elaboración es la fecha que se pasa como parámetro. Actualización diaria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_tendencia__archivo__with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fecha: Día (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_tendencia__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_nacional_tendencia__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/tendencia/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_nacional_tendencia__tiempo_actual_(self, **kwargs):  # noqa: E501
        """Predicción nacional tendencia. Tiempo actual.  # noqa: E501

        Predicción nacional para tendencia siguiente a la fecha de elaboración. En este caso la fecha de elaboración es el día actual. Actualización diaria. En el caso de que en el día actual  todavía no se haya elaborado se devolverá el último producto de predicción nacional para tendencia elaborado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_tendencia__tiempo_actual_(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_nacional_tendencia__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_nacional_tendencia__tiempo_actual__with_http_info(**kwargs)  # noqa: E501
            return data

    def prediccin_nacional_tendencia__tiempo_actual__with_http_info(self, **kwargs):  # noqa: E501
        """Predicción nacional tendencia. Tiempo actual.  # noqa: E501

        Predicción nacional para tendencia siguiente a la fecha de elaboración. En este caso la fecha de elaboración es el día actual. Actualización diaria. En el caso de que en el día actual  todavía no se haya elaborado se devolverá el último producto de predicción nacional para tendencia elaborado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_nacional_tendencia__tiempo_actual__with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_nacional_tendencia__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/nacional/tendencia', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_provincia_hoy__archivo_(self, provincia, fecha, **kwargs):  # noqa: E501
        """Predicción provincia hoy. Archivo.  # noqa: E501

        Predicción del día siguiente a la fecha que se pasa como parámetro para la provincia que se pasa como parámetro. Actualización continua y fija a las 14:00 Hora Oficial Peninsular del día que se pasa como parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_provincia_hoy__archivo_(provincia, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provincia:  | Código Provincia | Provincia | |----------|----------| | 01  | Araba/Álaba   | | 01  | Araba/Álava   | | 02  | Albacete   | | 03  | Alacant/Alicante  | | 04  | Almería   | | 33  | Asturias   | | 05  | Ávila   | | 06  | Badajoz   | | 07  | Illes Ballears   | | 08  | Barcelona   | | 48  | Bizkaia   | | 09  | Burgos   | | 10  | Cáceres   | | 11  | Cádiz   | | 39  | Cantabria   | | 12  | Castelló/Castellón   | | 51  | Ceuta   | | 13  | Ciudad Real   | | 14  | Córdoba   | | 15  | A Coruña   | | 16  | Cuenca   | | 17  | Girona   | | 18  | Granada   | | 19  | Guadalajara   | | 20  | Gipuzkoa   | | 21  | Huelva   | | 22  | Huesca   | | 23  | Jaén   | | 24  | León   | | 25  | Lleida   | | 27  | Lugo   | | 28  | Madrid   | | 29  | Málaga   | | 52  | Melilla   | | 30  | Murcia   | | 31  | Navarra   | | 32  | Oursense   | | 34  | Palencia   | | 35  | Las Palmas   | | 36  | Pontevedra   | | 26  | La Rioja   | | 37  | Salamanca   | | 38  | Santa Cruz de Tenerife   | | 40  | Segovia   | | 41  | Sevilla   | | 42  | Soria   | | 43  | Tarragona   | | 44  | Teruel   | | 45  | Toledo   | | 46  | València/Valencia   | | 47  | Valladolid   | | 49  | Zamora   | | 50  | Zaragoza   | |  (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_provincia_hoy__archivo__with_http_info(provincia, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_provincia_hoy__archivo__with_http_info(provincia, fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_provincia_hoy__archivo__with_http_info(self, provincia, fecha, **kwargs):  # noqa: E501
        """Predicción provincia hoy. Archivo.  # noqa: E501

        Predicción del día siguiente a la fecha que se pasa como parámetro para la provincia que se pasa como parámetro. Actualización continua y fija a las 14:00 Hora Oficial Peninsular del día que se pasa como parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_provincia_hoy__archivo__with_http_info(provincia, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provincia:  | Código Provincia | Provincia | |----------|----------| | 01  | Araba/Álaba   | | 01  | Araba/Álava   | | 02  | Albacete   | | 03  | Alacant/Alicante  | | 04  | Almería   | | 33  | Asturias   | | 05  | Ávila   | | 06  | Badajoz   | | 07  | Illes Ballears   | | 08  | Barcelona   | | 48  | Bizkaia   | | 09  | Burgos   | | 10  | Cáceres   | | 11  | Cádiz   | | 39  | Cantabria   | | 12  | Castelló/Castellón   | | 51  | Ceuta   | | 13  | Ciudad Real   | | 14  | Córdoba   | | 15  | A Coruña   | | 16  | Cuenca   | | 17  | Girona   | | 18  | Granada   | | 19  | Guadalajara   | | 20  | Gipuzkoa   | | 21  | Huelva   | | 22  | Huesca   | | 23  | Jaén   | | 24  | León   | | 25  | Lleida   | | 27  | Lugo   | | 28  | Madrid   | | 29  | Málaga   | | 52  | Melilla   | | 30  | Murcia   | | 31  | Navarra   | | 32  | Oursense   | | 34  | Palencia   | | 35  | Las Palmas   | | 36  | Pontevedra   | | 26  | La Rioja   | | 37  | Salamanca   | | 38  | Santa Cruz de Tenerife   | | 40  | Segovia   | | 41  | Sevilla   | | 42  | Soria   | | 43  | Tarragona   | | 44  | Teruel   | | 45  | Toledo   | | 46  | València/Valencia   | | 47  | Valladolid   | | 49  | Zamora   | | 50  | Zaragoza   | |  (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provincia', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_provincia_hoy__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provincia' is set
        if ('provincia' not in params or
                params['provincia'] is None):
            raise ValueError("Missing the required parameter `provincia` when calling `prediccin_provincia_hoy__archivo_`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_provincia_hoy__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provincia' in params:
            path_params['provincia'] = params['provincia']  # noqa: E501
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/provincia/hoy/{provincia}/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_provincia_hoy__tiempo_actual_(self, provincia, **kwargs):  # noqa: E501
        """Predicción provincia hoy. Tiempo actual.  # noqa: E501

        Predicción del día actual para la provincia que se pasa como parámetro. En el caso de que este producto no se haya elaborado todavía en el día actual, se retorna el último elaborado. Actualización continua y fija a las 14:00 Hora Oficial Peninsular.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_provincia_hoy__tiempo_actual_(provincia, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provincia:  | Código Provincia | Provincia | |----------|----------| | 01  | Araba/Álaba   | | 01  | Araba/Álava   | | 02  | Albacete   | | 03  | Alacant/Alicante  | | 04  | Almería   | | 33  | Asturias   | | 05  | Ávila   | | 06  | Badajoz   | | 07  | Illes Ballears   | | 08  | Barcelona   | | 48  | Bizkaia   | | 09  | Burgos   | | 10  | Cáceres   | | 11  | Cádiz   | | 39  | Cantabria   | | 12  | Castelló/Castellón   | | 51  | Ceuta   | | 13  | Ciudad Real   | | 14  | Córdoba   | | 15  | A Coruña   | | 16  | Cuenca   | | 17  | Girona   | | 18  | Granada   | | 19  | Guadalajara   | | 20  | Gipuzkoa   | | 21  | Huelva   | | 22  | Huesca   | | 23  | Jaén   | | 24  | León   | | 25  | Lleida   | | 27  | Lugo   | | 28  | Madrid   | | 29  | Málaga   | | 52  | Melilla   | | 30  | Murcia   | | 31  | Navarra   | | 32  | Oursense   | | 34  | Palencia   | | 35  | Las Palmas   | | 36  | Pontevedra   | | 26  | La Rioja   | | 37  | Salamanca   | | 38  | Santa Cruz de Tenerife   | | 40  | Segovia   | | 41  | Sevilla   | | 42  | Soria   | | 43  | Tarragona   | | 44  | Teruel   | | 45  | Toledo   | | 46  | València/Valencia   | | 47  | Valladolid   | | 49  | Zamora   | | 50  | Zaragoza   | |  (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_provincia_hoy__tiempo_actual__with_http_info(provincia, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_provincia_hoy__tiempo_actual__with_http_info(provincia, **kwargs)  # noqa: E501
            return data

    def prediccin_provincia_hoy__tiempo_actual__with_http_info(self, provincia, **kwargs):  # noqa: E501
        """Predicción provincia hoy. Tiempo actual.  # noqa: E501

        Predicción del día actual para la provincia que se pasa como parámetro. En el caso de que este producto no se haya elaborado todavía en el día actual, se retorna el último elaborado. Actualización continua y fija a las 14:00 Hora Oficial Peninsular.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_provincia_hoy__tiempo_actual__with_http_info(provincia, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provincia:  | Código Provincia | Provincia | |----------|----------| | 01  | Araba/Álaba   | | 01  | Araba/Álava   | | 02  | Albacete   | | 03  | Alacant/Alicante  | | 04  | Almería   | | 33  | Asturias   | | 05  | Ávila   | | 06  | Badajoz   | | 07  | Illes Ballears   | | 08  | Barcelona   | | 48  | Bizkaia   | | 09  | Burgos   | | 10  | Cáceres   | | 11  | Cádiz   | | 39  | Cantabria   | | 12  | Castelló/Castellón   | | 51  | Ceuta   | | 13  | Ciudad Real   | | 14  | Córdoba   | | 15  | A Coruña   | | 16  | Cuenca   | | 17  | Girona   | | 18  | Granada   | | 19  | Guadalajara   | | 20  | Gipuzkoa   | | 21  | Huelva   | | 22  | Huesca   | | 23  | Jaén   | | 24  | León   | | 25  | Lleida   | | 27  | Lugo   | | 28  | Madrid   | | 29  | Málaga   | | 52  | Melilla   | | 30  | Murcia   | | 31  | Navarra   | | 32  | Oursense   | | 34  | Palencia   | | 35  | Las Palmas   | | 36  | Pontevedra   | | 26  | La Rioja   | | 37  | Salamanca   | | 38  | Santa Cruz de Tenerife   | | 40  | Segovia   | | 41  | Sevilla   | | 42  | Soria   | | 43  | Tarragona   | | 44  | Teruel   | | 45  | Toledo   | | 46  | València/Valencia   | | 47  | Valladolid   | | 49  | Zamora   | | 50  | Zaragoza   | |  (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provincia']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_provincia_hoy__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provincia' is set
        if ('provincia' not in params or
                params['provincia'] is None):
            raise ValueError("Missing the required parameter `provincia` when calling `prediccin_provincia_hoy__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provincia' in params:
            path_params['provincia'] = params['provincia']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/provincia/hoy/{provincia}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_provincia_maana__archivo_(self, provincia, fecha, **kwargs):  # noqa: E501
        """Predicción provincia mañana. Archivo.  # noqa: E501

        Predicción del día siguiente a la fecha que se pasa como parámetro para la provincia que se pasa como parámetro. Actualización continua y fija a las 14:00 Hora Oficial Peninsular del día que se pasa como parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_provincia_maana__archivo_(provincia, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provincia:  | Código Provincia | Provincia | |----------|----------| | 01  | Araba/Álaba   | | 01  | Araba/Álava   | | 02  | Albacete   | | 03  | Alacant/Alicante  | | 04  | Almería   | | 33  | Asturias   | | 05  | Ávila   | | 06  | Badajoz   | | 07  | Illes Ballears   | | 08  | Barcelona   | | 48  | Bizkaia   | | 09  | Burgos   | | 10  | Cáceres   | | 11  | Cádiz   | | 39  | Cantabria   | | 12  | Castelló/Castellón   | | 51  | Ceuta   | | 13  | Ciudad Real   | | 14  | Córdoba   | | 15  | A Coruña   | | 16  | Cuenca   | | 17  | Girona   | | 18  | Granada   | | 19  | Guadalajara   | | 20  | Gipuzkoa   | | 21  | Huelva   | | 22  | Huesca   | | 23  | Jaén   | | 24  | León   | | 25  | Lleida   | | 27  | Lugo   | | 28  | Madrid   | | 29  | Málaga   | | 52  | Melilla   | | 30  | Murcia   | | 31  | Navarra   | | 32  | Oursense   | | 34  | Palencia   | | 35  | Las Palmas   | | 36  | Pontevedra   | | 26  | La Rioja   | | 37  | Salamanca   | | 38  | Santa Cruz de Tenerife   | | 40  | Segovia   | | 41  | Sevilla   | | 42  | Soria   | | 43  | Tarragona   | | 44  | Teruel   | | 45  | Toledo   | | 46  | València/Valencia   | | 47  | Valladolid   | | 49  | Zamora   | | 50  | Zaragoza   | |  (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_provincia_maana__archivo__with_http_info(provincia, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_provincia_maana__archivo__with_http_info(provincia, fecha, **kwargs)  # noqa: E501
            return data

    def prediccin_provincia_maana__archivo__with_http_info(self, provincia, fecha, **kwargs):  # noqa: E501
        """Predicción provincia mañana. Archivo.  # noqa: E501

        Predicción del día siguiente a la fecha que se pasa como parámetro para la provincia que se pasa como parámetro. Actualización continua y fija a las 14:00 Hora Oficial Peninsular del día que se pasa como parámetro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_provincia_maana__archivo__with_http_info(provincia, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provincia:  | Código Provincia | Provincia | |----------|----------| | 01  | Araba/Álaba   | | 01  | Araba/Álava   | | 02  | Albacete   | | 03  | Alacant/Alicante  | | 04  | Almería   | | 33  | Asturias   | | 05  | Ávila   | | 06  | Badajoz   | | 07  | Illes Ballears   | | 08  | Barcelona   | | 48  | Bizkaia   | | 09  | Burgos   | | 10  | Cáceres   | | 11  | Cádiz   | | 39  | Cantabria   | | 12  | Castelló/Castellón   | | 51  | Ceuta   | | 13  | Ciudad Real   | | 14  | Córdoba   | | 15  | A Coruña   | | 16  | Cuenca   | | 17  | Girona   | | 18  | Granada   | | 19  | Guadalajara   | | 20  | Gipuzkoa   | | 21  | Huelva   | | 22  | Huesca   | | 23  | Jaén   | | 24  | León   | | 25  | Lleida   | | 27  | Lugo   | | 28  | Madrid   | | 29  | Málaga   | | 52  | Melilla   | | 30  | Murcia   | | 31  | Navarra   | | 32  | Oursense   | | 34  | Palencia   | | 35  | Las Palmas   | | 36  | Pontevedra   | | 26  | La Rioja   | | 37  | Salamanca   | | 38  | Santa Cruz de Tenerife   | | 40  | Segovia   | | 41  | Sevilla   | | 42  | Soria   | | 43  | Tarragona   | | 44  | Teruel   | | 45  | Toledo   | | 46  | València/Valencia   | | 47  | Valladolid   | | 49  | Zamora   | | 50  | Zaragoza   | |  (required)
        :param str fecha: Día de elaboración (AAAA-MM-DD) (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provincia', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_provincia_maana__archivo_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provincia' is set
        if ('provincia' not in params or
                params['provincia'] is None):
            raise ValueError("Missing the required parameter `provincia` when calling `prediccin_provincia_maana__archivo_`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `prediccin_provincia_maana__archivo_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provincia' in params:
            path_params['provincia'] = params['provincia']  # noqa: E501
        if 'fecha' in params:
            path_params['fecha'] = params['fecha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/provincia/manana/{provincia}/elaboracion/{fecha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def prediccin_provincia_maana__tiempo_actual_(self, provincia, **kwargs):  # noqa: E501
        """Predicción provincia mañana. Tiempo actual.  # noqa: E501

        Predicción del día siguiente para la provincia que se pasa como parámetro. En el caso de que este producto no se haya elaborado todavía en el día actual, se retorna el último elaborado. Actualización continua y fija a las 14:00 Hora Oficial Peninsular.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_provincia_maana__tiempo_actual_(provincia, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provincia:  | Código Provincia | Provincia | |----------|----------| | 01  | Araba/Álaba   | | 01  | Araba/Álava   | | 02  | Albacete   | | 03  | Alacant/Alicante  | | 04  | Almería   | | 33  | Asturias   | | 05  | Ávila   | | 06  | Badajoz   | | 07  | Illes Ballears   | | 08  | Barcelona   | | 48  | Bizkaia   | | 09  | Burgos   | | 10  | Cáceres   | | 11  | Cádiz   | | 39  | Cantabria   | | 12  | Castelló/Castellón   | | 51  | Ceuta   | | 13  | Ciudad Real   | | 14  | Córdoba   | | 15  | A Coruña   | | 16  | Cuenca   | | 17  | Girona   | | 18  | Granada   | | 19  | Guadalajara   | | 20  | Gipuzkoa   | | 21  | Huelva   | | 22  | Huesca   | | 23  | Jaén   | | 24  | León   | | 25  | Lleida   | | 27  | Lugo   | | 28  | Madrid   | | 29  | Málaga   | | 52  | Melilla   | | 30  | Murcia   | | 31  | Navarra   | | 32  | Oursense   | | 34  | Palencia   | | 35  | Las Palmas   | | 36  | Pontevedra   | | 26  | La Rioja   | | 37  | Salamanca   | | 38  | Santa Cruz de Tenerife   | | 40  | Segovia   | | 41  | Sevilla   | | 42  | Soria   | | 43  | Tarragona   | | 44  | Teruel   | | 45  | Toledo   | | 46  | València/Valencia   | | 47  | Valladolid   | | 49  | Zamora   | | 50  | Zaragoza   | |  (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.prediccin_provincia_maana__tiempo_actual__with_http_info(provincia, **kwargs)  # noqa: E501
        else:
            (data) = self.prediccin_provincia_maana__tiempo_actual__with_http_info(provincia, **kwargs)  # noqa: E501
            return data

    def prediccin_provincia_maana__tiempo_actual__with_http_info(self, provincia, **kwargs):  # noqa: E501
        """Predicción provincia mañana. Tiempo actual.  # noqa: E501

        Predicción del día siguiente para la provincia que se pasa como parámetro. En el caso de que este producto no se haya elaborado todavía en el día actual, se retorna el último elaborado. Actualización continua y fija a las 14:00 Hora Oficial Peninsular.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.prediccin_provincia_maana__tiempo_actual__with_http_info(provincia, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provincia:  | Código Provincia | Provincia | |----------|----------| | 01  | Araba/Álaba   | | 01  | Araba/Álava   | | 02  | Albacete   | | 03  | Alacant/Alicante  | | 04  | Almería   | | 33  | Asturias   | | 05  | Ávila   | | 06  | Badajoz   | | 07  | Illes Ballears   | | 08  | Barcelona   | | 48  | Bizkaia   | | 09  | Burgos   | | 10  | Cáceres   | | 11  | Cádiz   | | 39  | Cantabria   | | 12  | Castelló/Castellón   | | 51  | Ceuta   | | 13  | Ciudad Real   | | 14  | Córdoba   | | 15  | A Coruña   | | 16  | Cuenca   | | 17  | Girona   | | 18  | Granada   | | 19  | Guadalajara   | | 20  | Gipuzkoa   | | 21  | Huelva   | | 22  | Huesca   | | 23  | Jaén   | | 24  | León   | | 25  | Lleida   | | 27  | Lugo   | | 28  | Madrid   | | 29  | Málaga   | | 52  | Melilla   | | 30  | Murcia   | | 31  | Navarra   | | 32  | Oursense   | | 34  | Palencia   | | 35  | Las Palmas   | | 36  | Pontevedra   | | 26  | La Rioja   | | 37  | Salamanca   | | 38  | Santa Cruz de Tenerife   | | 40  | Segovia   | | 41  | Sevilla   | | 42  | Soria   | | 43  | Tarragona   | | 44  | Teruel   | | 45  | Toledo   | | 46  | València/Valencia   | | 47  | Valladolid   | | 49  | Zamora   | | 50  | Zaragoza   | |  (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provincia']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prediccin_provincia_maana__tiempo_actual_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provincia' is set
        if ('provincia' not in params or
                params['provincia'] is None):
            raise ValueError("Missing the required parameter `provincia` when calling `prediccin_provincia_maana__tiempo_actual_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provincia' in params:
            path_params['provincia'] = params['provincia']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prediccion/provincia/manana/{provincia}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
